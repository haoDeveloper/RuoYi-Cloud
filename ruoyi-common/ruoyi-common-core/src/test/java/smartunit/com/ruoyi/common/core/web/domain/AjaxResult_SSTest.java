/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.common.core.web.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.ruoyi.common.core.web.domain.AjaxResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import reactor.core.publisher.SignalType;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AjaxResult_SSTest extends AjaxResult_SSTest_scaffolding {
// allCoveredLines:[30, 31, 40, 41, 42, 43, 53, 54, 55, 56, 58, 60, 69, 79, 90, 102, 113, 125, 135, 146, 158, 170, 180, 190, 203, 204]

  @Test(timeout = 4000)
  public void test_error_00()  throws Throwable  {
      //caseID:577922b58fd91f3b75f3cc0f5527aaae
      //CoveredLines: [53, 54, 55, 56, 60, 170]
      //Input_0_int: 23
      //Input_1_String: 
      //Assert: assertEquals(2, method_result.size());
      
      
      //Call method: error
      AjaxResult ajaxResult0 = AjaxResult.error(23, "");
      
      //Test Result Assert
      assertEquals(2, ajaxResult0.size());
  }

  @Test(timeout = 4000)
  public void test_error_01()  throws Throwable  {
      //caseID:4e33832831111550027b881a4907b05f
      //CoveredLines: [53, 54, 55, 56, 60, 135, 146, 158]
      //Assert: assertEquals(2, method_result.size());
      
      
      //Call method: error
      AjaxResult ajaxResult0 = AjaxResult.error();
      
      //Test Result Assert
      assertEquals(2, ajaxResult0.size());
  }

  @Test(timeout = 4000)
  public void test_error_02()  throws Throwable  {
      //caseID:d2d0a8fffdcb406d793492b5585f9709
      //CoveredLines: [40, 41, 42, 43, 53, 54, 55, 56, 60, 146, 158]
      //Input_0_String: 'J7:1iN
      //Assert: assertEquals(2, method_result.size());
      
      AjaxResult ajaxResult0 = new AjaxResult(500, "");
      
      //Call method: error
      AjaxResult ajaxResult1 = AjaxResult.error("'J7:1iN");
      
      //Test Result Assert
      assertEquals(2, ajaxResult1.size());
  }

  @Test(timeout = 4000)
  public void test_isError_03()  throws Throwable  {
      //caseID:2cf0d6608b12986ca85ce05f8bfe81ba
      //CoveredLines: [30, 31, 180, 190]
      //Assert: assertTrue(method_result);
      
      AjaxResult ajaxResult0 = new AjaxResult();
      
      //Call method: isError
      boolean boolean0 = ajaxResult0.isError();
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isError_04()  throws Throwable  {
      //caseID:632004a2b2231b8323989e0efe1735c0
      //CoveredLines: [40, 41, 42, 43, 180, 190]
      //Assert: assertFalse(method_result);
      
      AjaxResult ajaxResult0 = new AjaxResult(200, "data");
      
      //Call method: isError
      boolean boolean0 = ajaxResult0.isError();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isError_05()  throws Throwable  {
      //caseID:3c59cc8dedd348263b73a0e62b0192ee
      //CoveredLines: [40, 41, 42, 43, 180, 190]
      //Assert: assertTrue(method_result);
      
      AjaxResult ajaxResult0 = new AjaxResult(412, "");
      
      //Call method: isError
      boolean boolean0 = ajaxResult0.isError();
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isSuccess_06()  throws Throwable  {
      //caseID:73d95534d5ae20e8a4c0fcfda3af0367
      //CoveredLines: [53, 54, 55, 56, 58, 60, 180]
      //Assert: assertEquals(3, ajaxResult0.size());
      //Assert: assertTrue(method_result);
      
      AjaxResult ajaxResult0 = new AjaxResult(200, "", "");
      
      //Call method: isSuccess
      boolean boolean0 = ajaxResult0.isSuccess();
      
      //Test Result Assert
      assertEquals(3, ajaxResult0.size());
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_put_07()  throws Throwable  {
      //caseID:7ec488fdc010f17de6794a3c27122093
      //CoveredLines: [53, 54, 55, 56, 58, 60, 203, 204]
      //Input_0_String: p
      //Input_1_Object: 200
      //Assert: assertEquals(4, method_result.size());
      
      AjaxResult ajaxResult0 = new AjaxResult(601, "code", "code");
      Integer integer0 = new Integer(200);
      
      //Call method: put
      AjaxResult ajaxResult1 = ajaxResult0.put("p", (Object) integer0);
      
      //Test Result Assert
      assertEquals(4, ajaxResult1.size());
  }

  @Test(timeout = 4000)
  public void test_success_08()  throws Throwable  {
      //caseID:c16f0648201ceee21ad3f44191c6476e
      //CoveredLines: [53, 54, 55, 56, 58, 60, 79, 102]
      //Input_0_Object: SignalType.ON_NEXT
      //Assert: assertEquals(3, method_result.size());
      
      SignalType signalType0 = SignalType.ON_NEXT;
      
      //Call method: success
      AjaxResult ajaxResult0 = AjaxResult.success((Object) signalType0);
      
      //Test Result Assert
      assertEquals(3, ajaxResult0.size());
  }

  @Test(timeout = 4000)
  public void test_success_09()  throws Throwable  {
      //caseID:4d54d9bf0a0d76aaae0f6ba6f0dd6f39
      //CoveredLines: [53, 54, 55, 56, 60, 69, 90, 102]
      //Assert: assertEquals(2, method_result.size());
      
      
      //Call method: success
      AjaxResult ajaxResult0 = AjaxResult.success();
      
      //Test Result Assert
      assertEquals(2, ajaxResult0.size());
  }

  @Test(timeout = 4000)
  public void test_warn_10()  throws Throwable  {
      //caseID:36ca76a180b9cdd2e72f442ea04c7a70
      //CoveredLines: [53, 54, 55, 56, 58, 60, 113, 125]
      //Input_0_String: 1.0
      //Assert: assertEquals(2, method_result.size());
      
      Object object0 = new Object();
      AjaxResult ajaxResult0 = new AjaxResult((-16), "1", object0);
      
      //Call method: warn
      AjaxResult ajaxResult1 = AjaxResult.warn("1.0");
      
      //Test Result Assert
      assertEquals(2, ajaxResult1.size());
  }
}
