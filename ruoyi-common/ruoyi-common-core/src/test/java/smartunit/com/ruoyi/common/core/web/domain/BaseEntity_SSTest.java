/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.common.core.web.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.ruoyi.common.core.web.domain.BaseEntity;
import java.util.Date;
import java.util.Map;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BaseEntity_SSTest extends BaseEntity_SSTest_scaffolding {
// allCoveredLines:[16, 47, 52, 53, 57, 62, 63, 67, 72, 73, 77, 82, 83, 87, 92, 93, 97, 102, 103, 107, 109, 111, 116, 117]

  @Test(timeout = 4000)
  public void test_getCreateBy_00()  throws Throwable  {
      //caseID:969fd7b7c1a12fedc6ce059fb6b11ea1
      //CoveredLines: [16, 57]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getCreateBy
      String string0 = baseEntity0.getCreateBy();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getCreateTime_01()  throws Throwable  {
      //caseID:2413cf5a42a732f1592b939fa463feac
      //CoveredLines: [16, 67]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getCreateTime
      Date date0 = baseEntity0.getCreateTime();
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test_getParams_02()  throws Throwable  {
      //caseID:a7e13a8f84a384e6a2f196d5d8a78de8
      //CoveredLines: [16, 107, 111]
      //Assert: assertFalse(method_result.isEmpty());
      
      BaseEntity baseEntity0 = new BaseEntity();
      //mock map0
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) BaseEntity.class, baseEntity0, "params", (Object) map0);
      
      //Call method: getParams
      Map<String, Object> map1 = baseEntity0.getParams();
      
      //Test Result Assert
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getParams_03()  throws Throwable  {
      //caseID:d2f71b47df42dd19003152ca061270d2
      //CoveredLines: [16, 107, 109, 111]
      //Assert: assertNotNull(method_result);
      //Assert: assertTrue(method_result.isEmpty());
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getParams
      Map<String, Object> map0 = baseEntity0.getParams();
      
      //Test Result Assert
      assertNotNull(map0);
      
      //Test Result Assert
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_getRemark_04()  throws Throwable  {
      //caseID:a2e5ad6f6f9c071bb8c5f5b2556ebcec
      //CoveredLines: [16, 97]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getRemark
      String string0 = baseEntity0.getRemark();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getSearchValue_05()  throws Throwable  {
      //caseID:7e0c35520218cc74179902c2d547550f
      //CoveredLines: [16, 47]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getSearchValue
      String string0 = baseEntity0.getSearchValue();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getUpdateBy_06()  throws Throwable  {
      //caseID:28eb83ce481f56a90f30c35ed933af72
      //CoveredLines: [16, 77]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getUpdateBy
      String string0 = baseEntity0.getUpdateBy();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getUpdateTime_07()  throws Throwable  {
      //caseID:8566b4c1ac5daa101b0f5a74ded48cce
      //CoveredLines: [16, 87]
      //Assert: assertNull(method_result);
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: getUpdateTime
      Date date0 = baseEntity0.getUpdateTime();
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test_setCreateBy_08()  throws Throwable  {
      //caseID:0fc85a72536342aec74f01085dff2eab
      //CoveredLines: [16, 62, 63]
      //Input_0_String: com.ruoyi.common.core.web.domain.BaseEntity
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: setCreateBy
      baseEntity0.setCreateBy("com.ruoyi.common.core.web.domain.BaseEntity");
      
      //Test Result Assert
      assertEquals("com.ruoyi.common.core.web.domain.BaseEntity", baseEntity0.getCreateBy());
  }

  @Test(timeout = 4000)
  public void test_setCreateTime_09()  throws Throwable  {
      //caseID:50264f268f718f4d61c766bc8923a46f
      //CoveredLines: [16, 72, 73]
      //Input_0_Date: {}
      
      BaseEntity baseEntity0 = new BaseEntity();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCreateTime
      baseEntity0.setCreateTime(date0);
      
      //Test Result Assert
      assertNull(baseEntity0.getSearchValue());
  }

  @Test(timeout = 4000)
  public void test_setParams_10()  throws Throwable  {
      //caseID:815c5ff5951a267a8d76b89048e84e86
      //CoveredLines: [16, 116, 117]
      //Input_0_Map<String, Object>: {}
      
      BaseEntity baseEntity0 = new BaseEntity();
      //mock map0
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setParams
      baseEntity0.setParams(map0);
      
      //Test Result Assert
      assertNull(baseEntity0.getRemark());
  }

  @Test(timeout = 4000)
  public void test_setRemark_11()  throws Throwable  {
      //caseID:a43201caf24317903ecc3fcad58cf780
      //CoveredLines: [16, 102, 103]
      //Input_0_String: 1.0
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: setRemark
      baseEntity0.setRemark("1.0");
      
      //Test Result Assert
      assertNull(baseEntity0.getSearchValue());
  }

  @Test(timeout = 4000)
  public void test_setSearchValue_12()  throws Throwable  {
      //caseID:538454db290defad8a5f2a4bcc6c7dda
      //CoveredLines: [16, 52, 53]
      //Input_0_String: ;QBCNaN/8Ey
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: setSearchValue
      baseEntity0.setSearchValue(";QBCNaN/8Ey");
      
      //Test Result Assert
      assertNull(baseEntity0.getUpdateBy());
  }

  @Test(timeout = 4000)
  public void test_setUpdateBy_13()  throws Throwable  {
      //caseID:07126d28c8fa0f05f40433300885d8a2
      //CoveredLines: [16, 82, 83]
      //Input_0_String: 1.0
      
      BaseEntity baseEntity0 = new BaseEntity();
      
      //Call method: setUpdateBy
      baseEntity0.setUpdateBy("1.0");
      
      //Test Result Assert
      assertNull(baseEntity0.getCreateBy());
  }

  @Test(timeout = 4000)
  public void test_setUpdateTime_14()  throws Throwable  {
      //caseID:0c571ccdbb7d9e50cf5fdc3bd46cbd07
      //CoveredLines: [16, 92, 93]
      //Input_0_Date: {}
      
      BaseEntity baseEntity0 = new BaseEntity();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setUpdateTime
      baseEntity0.setUpdateTime(date0);
      
      //Test Result Assert
      assertNull(baseEntity0.getRemark());
  }
}
