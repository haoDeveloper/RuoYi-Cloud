/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.common.core.web.page;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.ruoyi.common.core.web.page.PageDomain;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PageDomain_SSTest extends PageDomain_SSTest_scaffolding {
// allCoveredLines:[10, 22, 25, 29, 31, 33, 38, 43, 44, 48, 53, 54, 58, 63, 64, 68, 73, 76, 78, 80, 82, 84, 86, 90, 94, 99, 100]

  @Test(timeout = 4000)
  public void test_getIsAsc_00()  throws Throwable  {
      //caseID:605ffeab838b0e68626fdcdc70b576de
      //CoveredLines: [10, 22, 25, 68]
      //Assert: assertEquals("asc", method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getIsAsc
      String string0 = pageDomain0.getIsAsc();
      
      //Test Result Assert
      assertEquals("asc", string0);
  }

  @Test(timeout = 4000)
  public void test_getOrderBy_01()  throws Throwable  {
      //caseID:6028b55003dd8d582836f68c61e98a35
      //CoveredLines: [10, 22, 25, 29, 31]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      //Assert: assertEquals("", method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getOrderBy
      String string0 = pageDomain0.getOrderBy();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test_getOrderBy_02()  throws Throwable  {
      //caseID:c2ea57bfc80d9d892472b78657e0300a
      //CoveredLines: [10, 22, 25, 29, 33]
      //Assert: assertEquals("descending asc", method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      PrivateAccess.setVariable((Class<?>) PageDomain.class, pageDomain0, "orderByColumn", (Object) "descending");
      
      //Call method: getOrderBy
      String string0 = pageDomain0.getOrderBy();
      
      //Test Result Assert
      assertEquals("descending asc", string0);
  }

  @Test(timeout = 4000)
  public void test_getOrderByColumn_03()  throws Throwable  {
      //caseID:e4e5318c8dfc6568bf8682c4259c21e1
      //CoveredLines: [10, 22, 25, 58]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getOrderByColumn
      pageDomain0.getOrderByColumn();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getPageNum_04()  throws Throwable  {
      //caseID:469fe2f436c505874a81538315776d82
      //CoveredLines: [10, 22, 25, 38]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getPageNum
      pageDomain0.getPageNum();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getPageSize_05()  throws Throwable  {
      //caseID:35a06c9b0739615e234ba79f653bfe6d
      //CoveredLines: [10, 22, 25, 48]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getPageSize
      pageDomain0.getPageSize();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getReasonable_06()  throws Throwable  {
      //caseID:80712de78eaf0b6705b775c68cbf8ef1
      //CoveredLines: [10, 22, 25, 90, 94]
      //Assert: assertTrue(method_result);
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getReasonable
      Boolean boolean0 = pageDomain0.getReasonable();
      
      //Test Result Assert
      assertTrue(boolean0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_07()  throws Throwable  {
      //caseID:f3ddc9ecaec700528961e7fd374af9e7
      //CoveredLines: [10, 22, 25, 73, 86]
      //Input_0_String: 
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_08()  throws Throwable  {
      //caseID:542246ead5b713d55ddae7231b8ca097
      //CoveredLines: [10, 22, 25, 73, 76, 78, 84, 86]
      //Input_0_String: ascending
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("ascending");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_09()  throws Throwable  {
      //caseID:5b1dc4d71ffeb04c2d4c2866cbd13347
      //CoveredLines: [10, 22, 25, 73, 76, 80, 84, 86]
      //Input_0_String: 76
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("76");
      
      //Test Result Assert
      assertEquals("76", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_10()  throws Throwable  {
      //caseID:0ee91a372f31f97d1806532baa60cc89
      //CoveredLines: [10, 22, 25, 73, 76, 80, 82, 84, 86]
      //Input_0_String: descending
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("descending");
      
      //Test Result Assert
      assertEquals("desc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setOrderByColumn_11()  throws Throwable  {
      //caseID:c181b6364d5325ceb5a296df0b76d74e
      //CoveredLines: [10, 22, 25, 63, 64]
      //Input_0_String: ~?Txm[MLd|Zrc@
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setOrderByColumn
      pageDomain0.setOrderByColumn("~?Txm[MLd|Zrc@");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setPageNum_12()  throws Throwable  {
      //caseID:fe42be40f40dbcbf1ef6a1f6698aa6aa
      //CoveredLines: [10, 22, 25, 43, 44]
      //Input_0_Integer: (-1)
      
      PageDomain pageDomain0 = new PageDomain();
      Integer integer0 = new Integer((-1));
      
      //Call method: setPageNum
      pageDomain0.setPageNum(integer0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setPageSize_13()  throws Throwable  {
      //caseID:47ab6efd37a60f694530fcbdf0ad0dde
      //CoveredLines: [10, 22, 25, 53, 54]
      //Input_0_Integer: 0
      
      PageDomain pageDomain0 = new PageDomain();
      Integer integer0 = new Integer(0);
      
      //Call method: setPageSize
      pageDomain0.setPageSize(integer0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setReasonable_14()  throws Throwable  {
      //caseID:a8bed32d103eb015fbcdf70c30efbab5
      //CoveredLines: [10, 22, 25, 99, 100]
      //Input_0_Boolean: Boolean.TRUE
      
      PageDomain pageDomain0 = new PageDomain();
      Boolean boolean0 = Boolean.TRUE;
      
      //Call method: setReasonable
      pageDomain0.setReasonable(boolean0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }
}
