/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.common.core.web.page;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.ruoyi.common.core.web.page.PageDomain;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PageDomain_SSTest extends PageDomain_SSTest_scaffolding {
// allCoveredLines:[10, 22, 25, 29, 31, 33, 38, 43, 44, 48, 53, 54, 58, 63, 64, 68, 73, 76, 78, 80, 82, 84, 86, 90, 94, 99, 100]

  @Test(timeout = 4000)
  public void test_getIsAsc_00()  throws Throwable  {
      //caseID:d60200562b90bc16548683eb3c90c886
      //CoveredLines: [10, 22, 25, 68]
      //Assert: assertEquals("asc", method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getIsAsc
      String string0 = pageDomain0.getIsAsc();
      
      //Test Result Assert
      assertEquals("asc", string0);
  }

  @Test(timeout = 4000)
  public void test_getOrderBy_01()  throws Throwable  {
      //caseID:6698576e516c472083c13468a69ca2c1
      //CoveredLines: [10, 22, 25, 29, 31]
      //Assert: assertEquals("", method_result);
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getOrderBy
      String string0 = pageDomain0.getOrderBy();
      
      //Test Result Assert
      assertEquals("", string0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getOrderBy_02()  throws Throwable  {
      //caseID:74e27c36a45c3459ef04531d7673de7b
      //CoveredLines: [10, 22, 25, 29, 33]
      //Assert: assertEquals("ascending asc", method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      PrivateAccess.setVariable((Class<?>) PageDomain.class, pageDomain0, "orderByColumn", (Object) "ascending");
      
      //Call method: getOrderBy
      String string0 = pageDomain0.getOrderBy();
      
      //Test Result Assert
      assertEquals("ascending asc", string0);
  }

  @Test(timeout = 4000)
  public void test_getOrderByColumn_03()  throws Throwable  {
      //caseID:91c6490e49cdc54d7441db654817e639
      //CoveredLines: [10, 22, 25, 58]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getOrderByColumn
      pageDomain0.getOrderByColumn();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getPageNum_04()  throws Throwable  {
      //caseID:c46490c8477b78298f4602988666db91
      //CoveredLines: [10, 22, 25, 38]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getPageNum
      pageDomain0.getPageNum();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getPageSize_05()  throws Throwable  {
      //caseID:5209ec7ac5702a3024321b5d82c977a9
      //CoveredLines: [10, 22, 25, 48]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getPageSize
      pageDomain0.getPageSize();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_getReasonable_06()  throws Throwable  {
      //caseID:b16ffb0b1c4bffacadc26d000d8ea6aa
      //CoveredLines: [10, 22, 25, 90, 94]
      //Assert: assertEquals("asc", pageDomain0.getIsAsc());
      //Assert: assertTrue(method_result);
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: getReasonable
      Boolean boolean0 = pageDomain0.getReasonable();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_07()  throws Throwable  {
      //caseID:d1740a46c92da09f6b33b840ef3d8f37
      //CoveredLines: [10, 22, 25, 73, 86]
      //Input_0_String:  
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc(" ");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_08()  throws Throwable  {
      //caseID:6e5cc7ac56d264d8f158de98854af3c1
      //CoveredLines: [10, 22, 25, 73, 76, 78, 84, 86]
      //Input_0_String: ascending
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("ascending");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_09()  throws Throwable  {
      //caseID:0cb51d259df405fc8fa27acd6fd6a376
      //CoveredLines: [10, 22, 25, 73, 76, 80, 84, 86]
      //Input_0_String: S
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("S");
      
      //Test Result Assert
      assertEquals("S", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setIsAsc_10()  throws Throwable  {
      //caseID:960f3f6d1ded88ef1206107e651519d9
      //CoveredLines: [10, 22, 25, 73, 76, 80, 82, 84, 86]
      //Input_0_String: descending
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
      
      
      //Call method: setIsAsc
      pageDomain0.setIsAsc("descending");
      
      //Test Result Assert
      assertEquals("desc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setOrderByColumn_11()  throws Throwable  {
      //caseID:86a57363899115a4d1dc46e877a2a818
      //CoveredLines: [10, 22, 25, 63, 64]
      //Input_0_String: 1.0
      
      PageDomain pageDomain0 = new PageDomain();
      
      //Call method: setOrderByColumn
      pageDomain0.setOrderByColumn("1.0");
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setPageNum_12()  throws Throwable  {
      //caseID:b293bad4f4a038130c8a8d0653e38c6b
      //CoveredLines: [10, 22, 25, 43, 44]
      //Input_0_Integer: 0
      
      PageDomain pageDomain0 = new PageDomain();
      Integer integer0 = new Integer(0);
      
      //Call method: setPageNum
      pageDomain0.setPageNum(integer0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setPageSize_13()  throws Throwable  {
      //caseID:70d50c6ffeea01d49b345cc536607e51
      //CoveredLines: [10, 22, 25, 53, 54]
      //Input_0_Integer: (-2080726527)
      
      PageDomain pageDomain0 = new PageDomain();
      Integer integer0 = new Integer((-2080726527));
      
      //Call method: setPageSize
      pageDomain0.setPageSize(integer0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }

  @Test(timeout = 4000)
  public void test_setReasonable_14()  throws Throwable  {
      //caseID:9ae6e984bc55e361b2ca76a7a1b2640f
      //CoveredLines: [10, 22, 25, 99, 100]
      //Input_0_Boolean: Boolean.TRUE
      
      PageDomain pageDomain0 = new PageDomain();
      Boolean boolean0 = Boolean.TRUE;
      
      //Call method: setReasonable
      pageDomain0.setReasonable(boolean0);
      
      //Test Result Assert
      assertEquals("asc", pageDomain0.getIsAsc());
  }
}
