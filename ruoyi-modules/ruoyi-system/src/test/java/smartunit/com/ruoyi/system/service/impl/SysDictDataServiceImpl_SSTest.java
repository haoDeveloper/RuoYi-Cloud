/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.system.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.ruoyi.common.core.utils.SpringUtils;
import com.ruoyi.common.redis.service.RedisService;
import com.ruoyi.system.api.domain.SysDictData;
import com.ruoyi.system.mapper.SysDictDataMapper;
import com.ruoyi.system.service.impl.SysDictDataServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SysDictDataServiceImpl_SSTest extends SysDictDataServiceImpl_SSTest_scaffolding {
// allCoveredLines:[17, 31, 44, 56, 67, 69, 70, 71, 72, 74, 85, 86, 88, 89, 91, 103, 104, 106, 107, 109]

  @Test(timeout = 4000)
  public void test_deleteDictDataByIds_0()  throws Throwable  {
      //caseID:db4defee7f50f5de288c224b4215a9a1
      //CoveredLines: [17, 56, 67, 69, 70, 71, 72]
      //Input_0_Long[]: longArray0
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0", "1").when(sysDictData0).getDictType();
      doReturn("0V90T$IN/1%}g\"Oy").when(sysDictData0).toString();
      LinkedList<SysDictData> linkedList0 = new LinkedList<SysDictData>();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(sysDictDataMapper0).deleteDictDataById(nullable(java.lang.Long.class));
      doReturn(sysDictData0).when(sysDictDataMapper0).selectDictDataById(nullable(java.lang.Long.class));
      doReturn(linkedList0).when(sysDictDataMapper0).selectDictDataByType(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      Long[] longArray0 = new Long[10];
      
      //Call method: deleteDictDataByIds
      // Undeclared exception!
      try { 
        sysDictDataServiceImpl0.deleteDictDataByIds(longArray0);
      } catch(Throwable e) {
         verifyException("com.ruoyi.common.core.utils.SpringUtils", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteDictDataByIds_1()  throws Throwable  {
      //caseID:9adf788ae67d2c0fbe497ef4ff8d9c69
      //CoveredLines: [17, 67, 74]
      //Input_0_Long[]: longArray0
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      Long[] longArray0 = new Long[0];
      
      //Call method: deleteDictDataByIds
      sysDictDataServiceImpl0.deleteDictDataByIds(longArray0);
      
      //Test Result Assert
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test_insertDictData_2()  throws Throwable  {
      //caseID:5213a52c36cb3812d2c4c298fbaa6b7f
      //CoveredLines: [17, 85, 86, 91]
      //Input_0_SysDictData: {}
      //Assert: assertEquals(0, method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: insertDictData
      int int0 = sysDictDataServiceImpl0.insertDictData(sysDictData0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_insertDictData_3()  throws Throwable  {
      //caseID:4f31162739f8e3cfde8b02c763e7613e
      //CoveredLines: [17, 85, 86, 88, 89, 91]
      //Input_0_SysDictData: {getDictType=\"TEGw;`L/\" \"TEGw;`L/\"}
      //Assert: assertEquals(1, method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      LinkedList<SysDictData> linkedList0 = new LinkedList<SysDictData>();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(sysDictDataMapper0).insertDictData(any(com.ruoyi.system.api.domain.SysDictData.class));
      doReturn(linkedList0).when(sysDictDataMapper0).selectDictDataByType(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      SpringUtils springUtils0 = new SpringUtils();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock configurableListableBeanFactory0
      ConfigurableListableBeanFactory configurableListableBeanFactory0 = mock(ConfigurableListableBeanFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisService0).when(configurableListableBeanFactory0).getBean(any(java.lang.Class.class));
      
      springUtils0.postProcessBeanFactory(configurableListableBeanFactory0);
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("TEGw;`L/", "TEGw;`L/").when(sysDictData0).getDictType();
      
      //Call method: insertDictData
      int int0 = sysDictDataServiceImpl0.insertDictData(sysDictData0);
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_selectDictDataList_4()  throws Throwable  {
      //caseID:613b0faefc678edf3468a5736b27c26c
      //CoveredLines: [17, 31]
      //Input_0_SysDictData: {}
      //Assert: assertNull(method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: selectDictDataList
      List<SysDictData> list0 = sysDictDataServiceImpl0.selectDictDataList(sysDictData0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_selectDictLabel_5()  throws Throwable  {
      //caseID:4d91c430ee5ac9ea5091788f1c7e49d2
      //CoveredLines: [17, 44]
      //Input_0_String: reactor.core.publisher.ParallelMergeReduce$SlotPair
      //Input_1_String: reactor.core.publisher.ParallelMergeReduce$SlotPair
      //Assert: assertEquals("reactor.core.publisher.ParallelMergeReduce$SlotPair", method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.core.publisher.ParallelMergeReduce$SlotPair").when(sysDictDataMapper0).selectDictLabel(anyString() , anyString());
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      
      //Call method: selectDictLabel
      String string0 = sysDictDataServiceImpl0.selectDictLabel("reactor.core.publisher.ParallelMergeReduce$SlotPair", "reactor.core.publisher.ParallelMergeReduce$SlotPair");
      
      //Test Result Assert
      assertEquals("reactor.core.publisher.ParallelMergeReduce$SlotPair", string0);
  }

  @Test(timeout = 4000)
  public void test_updateDictData_6()  throws Throwable  {
      //caseID:d2038208abe573a882e62e4acdfe45cc
      //CoveredLines: [17, 103, 104, 109]
      //Input_0_SysDictData: {}
      //Assert: assertEquals(0, method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateDictData
      int int0 = sysDictDataServiceImpl0.updateDictData(sysDictData0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateDictData_7()  throws Throwable  {
      //caseID:b1899c7a6e955064571602c776519487
      //CoveredLines: [17, 103, 104, 106, 107, 109]
      //Input_0_SysDictData: {getDictType=\"com.ruoyi.system.service.impl.SysDictDataServiceImpl\" \"com.ruoyi.system.service.impl.SysDictDataServiceImpl\"}
      //Assert: assertEquals(167, method_result);
      
      SysDictDataServiceImpl sysDictDataServiceImpl0 = new SysDictDataServiceImpl();
      ArrayList<SysDictData> arrayList0 = new ArrayList<SysDictData>();
      //mock sysDictDataMapper0
      SysDictDataMapper sysDictDataMapper0 = mock(SysDictDataMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(sysDictDataMapper0).selectDictDataByType(nullable(java.lang.String.class));
      doReturn(167).when(sysDictDataMapper0).updateDictData(any(com.ruoyi.system.api.domain.SysDictData.class));
      
      PrivateAccess.setVariable((Class<?>) SysDictDataServiceImpl.class, sysDictDataServiceImpl0, "dictDataMapper", (Object) sysDictDataMapper0);
      SpringUtils springUtils0 = new SpringUtils();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock configurableListableBeanFactory0
      ConfigurableListableBeanFactory configurableListableBeanFactory0 = mock(ConfigurableListableBeanFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisService0).when(configurableListableBeanFactory0).getBean(any(java.lang.Class.class));
      
      springUtils0.postProcessBeanFactory(configurableListableBeanFactory0);
      //mock sysDictData0
      SysDictData sysDictData0 = mock(SysDictData.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.ruoyi.system.service.impl.SysDictDataServiceImpl", "com.ruoyi.system.service.impl.SysDictDataServiceImpl").when(sysDictData0).getDictType();
      
      //Call method: updateDictData
      int int0 = sysDictDataServiceImpl0.updateDictData(sysDictData0);
      
      //Test Result Assert
      assertEquals(167, int0);
  }
}
