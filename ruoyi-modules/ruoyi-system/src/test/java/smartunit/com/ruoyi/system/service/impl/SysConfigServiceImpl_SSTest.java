/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.system.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.ruoyi.common.redis.service.RedisService;
import com.ruoyi.system.domain.SysConfig;
import com.ruoyi.system.mapper.SysConfigMapper;
import com.ruoyi.system.service.impl.SysConfigServiceImpl;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.concurrent.Delayed;
import java.util.concurrent.PriorityBlockingQueue;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SysConfigServiceImpl_SSTest extends SysConfigServiceImpl_SSTest_scaffolding {
// allCoveredLines:[24, 38, 39, 50, 51, 52, 64, 65, 67, 69, 70, 71, 72, 74, 75, 77, 89, 101, 102, 104, 106, 118, 119, 121, 124, 125, 127, 129, 140, 142, 143, 145, 147, 148, 150, 158, 159, 161, 162, 163, 171, 172, 173, 181, 182, 183, 194, 195, 196, 198, 200, 211]

  @Test(timeout = 4000)
  public void test_checkConfigKeyUnique_00()  throws Throwable  {
      //caseID:cabf02afeaa74b75f2c96062ae4e8807
      //CoveredLines: [24, 194, 195, 196, 198]
      //Input_0_SysConfig: {getConfigId=1L 1L, getConfigKey=\"1\"}
      //Assert: assertEquals("1", method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      Long long0 = new Long((-843L));
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysConfig0).getConfigId();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).checkConfigKeyUnique(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      Long long1 = new Long(1L);
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long1, long1).when(sysConfig1).getConfigId();
      doReturn("1").when(sysConfig1).getConfigKey();
      
      //Call method: checkConfigKeyUnique
      String string0 = sysConfigServiceImpl0.checkConfigKeyUnique(sysConfig1);
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test_checkConfigKeyUnique_01()  throws Throwable  {
      //caseID:5cba6d337fadd11dea5e1d758de47751
      //CoveredLines: [24, 194, 195, 196, 200]
      //Input_0_SysConfig: {getConfigId=0L 0L, getConfigKey=\"}g:qI#o$cY(Tnttro\"}
      //Assert: assertEquals("0", method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      Long long0 = new Long(0L);
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysConfig0).getConfigId();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).checkConfigKeyUnique(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(sysConfig1).getConfigId();
      doReturn("}g:qI#o$cY(Tnttro").when(sysConfig1).getConfigKey();
      
      //Call method: checkConfigKeyUnique
      String string0 = sysConfigServiceImpl0.checkConfigKeyUnique(sysConfig1);
      
      //Test Result Assert
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test_checkConfigKeyUnique_02()  throws Throwable  {
      //caseID:f4f47f84787f9f77a668f78b766016e7
      //CoveredLines: [24, 194, 195, 196, 200]
      //Input_0_SysConfig: {}
      //Assert: assertEquals("0", method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: checkConfigKeyUnique
      String string0 = sysConfigServiceImpl0.checkConfigKeyUnique(sysConfig0);
      
      //Test Result Assert
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test_deleteConfigByIds_03()  throws Throwable  {
      //caseID:df6711b4f106db5b043a58a4efdc7cac
      //CoveredLines: [24, 50, 51, 52, 140, 142, 143, 145, 147, 148, 211]
      //Input_0_Long[]: longArray0
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(redisService0).deleteObject(anyString());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("71303172").when(sysConfig0).getConfigKey();
      doReturn("71303172").when(sysConfig0).getConfigType();
      doReturn("71303172").when(sysConfig0).toString();
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(sysConfig1).getConfigKey();
      doReturn("Y").when(sysConfig1).getConfigType();
      doReturn("71303172").when(sysConfig1).toString();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(sysConfigMapper0).deleteConfigById(nullable(java.lang.Long.class));
      doReturn(sysConfig0, sysConfig1).when(sysConfigMapper0).selectConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      Long[] longArray0 = new Long[4];
      
      //Call method: deleteConfigByIds
      // Undeclared exception!
      try { 
        sysConfigServiceImpl0.deleteConfigByIds(longArray0);
      } catch(Throwable e) {
         verifyException("com.ruoyi.system.service.impl.SysConfigServiceImpl", e);
         assertEquals("com.ruoyi.common.core.exception.ServiceException", e.getClass().getName());
         assertEquals("\u5185\u7F6E\u53C2\u6570\u30101.0\u3011\u4E0D\u80FD\u5220\u9664 ", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_deleteConfigByIds_04()  throws Throwable  {
      //caseID:e96b09b848b181c63aded2e755c26ae2
      //CoveredLines: [24, 50, 51, 52, 140, 142, 143, 147, 148, 150, 211]
      //Input_0_Long[]: longArray0
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).selectConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      Long[] longArray0 = new Long[4];
      
      //Call method: deleteConfigByIds
      sysConfigServiceImpl0.deleteConfigByIds(longArray0);
      
      //Test Result Assert
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test_init_05()  throws Throwable  {
      //caseID:4858bed83fe70c7bdefacccbcd3a39d9
      //CoveredLines: [24, 38, 39, 158, 159, 163]
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      LinkedList<SysConfig> linkedList0 = new LinkedList<SysConfig>();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(sysConfigMapper0).selectConfigList(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      //Call method: init
      sysConfigServiceImpl0.init();
  }

  @Test(timeout = 4000)
  public void test_insertConfig_06()  throws Throwable  {
      //caseID:626486c75ce15a51296d91ce5b462afe
      //CoveredLines: [24, 101, 102, 106]
      //Input_0_SysConfig: {}
      //Assert: assertEquals(0, method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: insertConfig
      int int0 = sysConfigServiceImpl0.insertConfig(sysConfig0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_insertConfig_07()  throws Throwable  {
      //caseID:9f82d5b1fd25361fe742c9c0fa914ea5
      //CoveredLines: [24, 101, 102, 104, 106, 211]
      //Input_0_SysConfig: {}
      //Assert: assertEquals(19, method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(19).when(sysConfigMapper0).insertConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: insertConfig
      int int0 = sysConfigServiceImpl0.insertConfig(sysConfig0);
      
      //Test Result Assert
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test_loadingConfigCache_08()  throws Throwable  {
      //caseID:e0abb9c5ff1ba805ada73456fd6c6dce
      //CoveredLines: [24, 158, 159, 161, 162, 163, 211]
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<SysConfig> linkedList0 = new LinkedList<SysConfig>();
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(sysConfig0);
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(sysConfigMapper0).selectConfigList(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: loadingConfigCache
      sysConfigServiceImpl0.loadingConfigCache();
  }

  @Test(timeout = 4000)
  public void test_resetConfigCache_09()  throws Throwable  {
      //caseID:cb63c63c64a8f45576d3683ca058cee1
      //CoveredLines: [24, 158, 159, 163, 171, 172, 173, 181, 182, 183]
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(redisService0).deleteObject(nullable(java.util.Collection.class));
      doReturn(priorityBlockingQueue0).when(redisService0).keys(anyString());
      Stack<SysConfig> stack0 = new Stack<SysConfig>();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(sysConfigMapper0).selectConfigList(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: resetConfigCache
      sysConfigServiceImpl0.resetConfigCache();
  }

  @Test(timeout = 4000)
  public void test_selectConfigByKey_10()  throws Throwable  {
      //caseID:3bebe3fed9dbe9636eb11cccc6252e77
      //CoveredLines: [24, 64, 65, 67, 211]
      //Input_0_String: userDatabaseRealm.noDatabase
      //Assert: assertNotNull(method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfigServiceImpl0).when(redisService0).getCacheObject(anyString());
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: selectConfigByKey
      String string0 = sysConfigServiceImpl0.selectConfigByKey("userDatabaseRealm.noDatabase");
      
      //Test Result Assert
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test_selectConfigByKey_11()  throws Throwable  {
      //caseID:648ae66b74d6880ea8afdc43f846a4cc
      //CoveredLines: [24, 64, 65, 69, 70, 71, 72, 77, 211]
      //Input_0_String: userDatabaseRealm.noDatabase
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("", method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: selectConfigByKey
      String string0 = sysConfigServiceImpl0.selectConfigByKey("userDatabaseRealm.noDatabase");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test_selectConfigByKey_12()  throws Throwable  {
      //caseID:ee31d5b320e81ced0a7e7c856a79f642
      //CoveredLines: [24, 64, 65, 69, 70, 71, 72, 74, 75, 211]
      //Input_0_String: userDatabaseRealm.noDatabase
      //Assert: assertNull(method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock delayed0
      Delayed delayed0 = mock(Delayed.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(delayed0).when(redisService0).getCacheObject(anyString());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).selectConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      
      //Call method: selectConfigByKey
      String string0 = sysConfigServiceImpl0.selectConfigByKey("userDatabaseRealm.noDatabase");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_selectConfigList_13()  throws Throwable  {
      //caseID:1a480ee36ec653629f4300fb84a9dc65
      //CoveredLines: [24, 89]
      //Input_0_SysConfig: {}
      //Assert: assertNull(method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: selectConfigList
      List<SysConfig> list0 = sysConfigServiceImpl0.selectConfigList(sysConfig0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateConfig_14()  throws Throwable  {
      //caseID:ce105080faae0364c7e00db26a5f25b2
      //CoveredLines: [24, 118, 119, 121, 124, 125, 129, 211]
      //Input_0_SysConfig: {getConfigId=2505L, getConfigKey=\"1.0\"}
      //Assert: assertEquals((-1), method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(sysConfig0).getConfigKey();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).selectConfigById(anyLong());
      doReturn((-1)).when(sysConfigMapper0).updateConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      Long long0 = new Long(2505L);
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysConfig1).getConfigId();
      doReturn("1.0").when(sysConfig1).getConfigKey();
      
      //Call method: updateConfig
      int int0 = sysConfigServiceImpl0.updateConfig(sysConfig1);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_updateConfig_15()  throws Throwable  {
      //caseID:058a2b80166c03b9319a4eda1041c573
      //CoveredLines: [24, 118, 119, 124, 125, 127, 129, 211]
      //Input_0_SysConfig: {getConfigId=0L, getConfigKey=\"|:i2B\"}
      //Assert: assertEquals(1492440247, method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("|:i2B").when(sysConfig0).getConfigKey();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).selectConfigById(anyLong());
      doReturn(1492440247).when(sysConfigMapper0).updateConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      Long long0 = new Long(0L);
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysConfig1).getConfigId();
      doReturn("|:i2B").when(sysConfig1).getConfigKey();
      
      //Call method: updateConfig
      int int0 = sysConfigServiceImpl0.updateConfig(sysConfig1);
      
      //Test Result Assert
      assertEquals(1492440247, int0);
  }

  @Test(timeout = 4000)
  public void test_updateConfig_16()  throws Throwable  {
      //caseID:88c7728714b5047a1d0e92eb346b9702
      //CoveredLines: [24, 118, 119, 121, 124, 125, 127, 129, 211]
      //Input_0_SysConfig: {getConfigId=54, getConfigKey=\"-2144942246\"}
      //Assert: assertEquals(54, method_result);
      
      SysConfigServiceImpl sysConfigServiceImpl0 = new SysConfigServiceImpl();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysConfig0
      SysConfig sysConfig0 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(sysConfig0).getConfigKey();
      //mock sysConfigMapper0
      SysConfigMapper sysConfigMapper0 = mock(SysConfigMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysConfig0).when(sysConfigMapper0).selectConfigById(anyLong());
      doReturn(54).when(sysConfigMapper0).updateConfig(any(com.ruoyi.system.domain.SysConfig.class));
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "configMapper", (Object) sysConfigMapper0);
      
      PrivateAccess.setVariable((Class<?>) SysConfigServiceImpl.class, sysConfigServiceImpl0, "redisService", (Object) redisService0);
      Long long0 = new Long(54);
      //mock sysConfig1
      SysConfig sysConfig1 = mock(SysConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysConfig1).getConfigId();
      doReturn("-2144942246").when(sysConfig1).getConfigKey();
      
      //Call method: updateConfig
      int int0 = sysConfigServiceImpl0.updateConfig(sysConfig1);
      
      //Test Result Assert
      assertEquals(54, int0);
  }
}
