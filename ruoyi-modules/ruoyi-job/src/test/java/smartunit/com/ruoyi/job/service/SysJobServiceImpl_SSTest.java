/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.ruoyi.job.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.ruoyi.job.domain.SysJob;
import com.ruoyi.job.mapper.SysJobMapper;
import com.ruoyi.job.service.SysJobServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.quartz.Scheduler;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SysJobServiceImpl_SSTest extends SysJobServiceImpl_SSTest_scaffolding {
// allCoveredLines:[25, 39, 40, 41, 43, 45, 56, 68, 80, 81, 82, 83, 84, 86, 88, 100, 101, 102, 103, 104, 106, 108, 120, 121, 122, 123, 125, 127, 140, 142, 143, 145, 156, 157, 158, 160, 162, 164, 166, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 191, 203, 204, 205, 207, 209, 221, 222, 223, 225, 227, 238, 240, 241, 244, 246, 258]

  @Test(timeout = 4000)
  public void test_changeStatus_00()  throws Throwable  {
      //caseID:7c01deeff4f8118861f60717b841f5e1
      //CoveredLines: [25, 156, 157, 158, 162, 166]
      //Input_0_SysJob: {}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: changeStatus
      int int0 = sysJobServiceImpl0.changeStatus(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_changeStatus_01()  throws Throwable  {
      //caseID:790382956f043f1129e91c57439d1e9b
      //CoveredLines: [25, 100, 101, 102, 103, 104, 108, 156, 157, 158, 160, 166]
      //Input_0_SysJob: {getStatus=\"0\"}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(sysJob0).getStatus();
      
      //Call method: changeStatus
      int int0 = sysJobServiceImpl0.changeStatus(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_changeStatus_02()  throws Throwable  {
      //caseID:f6a1a7683867d891d66e235c3d48f18a
      //CoveredLines: [25, 80, 81, 82, 83, 84, 88, 156, 157, 158, 162, 164, 166]
      //Input_0_SysJob: {getStatus=\"1\"}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(sysJob0).getStatus();
      
      //Call method: changeStatus
      int int0 = sysJobServiceImpl0.changeStatus(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_changeStatus_03()  throws Throwable  {
      //caseID:1cb9202bcc119564afc4e433f298adb0
      //CoveredLines: [25, 80, 81, 82, 83, 84, 86, 88, 156, 157, 158, 162, 164, 166]
      //Input_0_SysJob: {getJobId=120, getJobGroup=\"0\", getStatus=\"1\"}
      //Assert: assertEquals(120, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(120).when(sysJobMapper0).updateJob(any(com.ruoyi.job.domain.SysJob.class));
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long long0 = new Long(120);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(sysJob0).getJobGroup();
      doReturn(long0).when(sysJob0).getJobId();
      doReturn("1").when(sysJob0).getStatus();
      
      //Call method: changeStatus
      int int0 = sysJobServiceImpl0.changeStatus(sysJob0);
      
      //Test Result Assert
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test_checkCronExpressionIsValid_04()  throws Throwable  {
      //caseID:94ed7f427ae53979906bc2763c886427
      //CoveredLines: [25, 258]
      //Input_0_String: 
      //Assert: assertFalse(method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      
      //Call method: checkCronExpressionIsValid
      boolean boolean0 = sysJobServiceImpl0.checkCronExpressionIsValid("");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_deleteJob_05()  throws Throwable  {
      //caseID:ff5ccc6d28af3007a4397310153092bd
      //CoveredLines: [25, 120, 121, 122, 123, 127]
      //Input_0_SysJob: {}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteJob
      int int0 = sysJobServiceImpl0.deleteJob(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_deleteJobByIds_06()  throws Throwable  {
      //caseID:42d2a828f832fa69fb6f94397430ef7b
      //CoveredLines: [25, 120, 121, 122, 123, 125, 127, 140, 142, 143, 145]
      //Input_0_Long[]: longArray0
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      Long long0 = new Long(333L);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(sysJob0).getJobGroup();
      doReturn(long0).when(sysJob0).getJobId();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(208).when(sysJobMapper0).deleteJobById(nullable(java.lang.Long.class));
      doReturn(sysJob0).when(sysJobMapper0).selectJobById(anyLong());
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(scheduler0).deleteJob(any(org.quartz.JobKey.class));
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      
      //Call method: deleteJobByIds
      sysJobServiceImpl0.deleteJobByIds(longArray0);
      
      //Test Result Assert
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test_init_07()  throws Throwable  {
      //caseID:9f147ddeca098c22bedf51d3bec9df62
      //CoveredLines: [25, 39, 40, 41, 43]
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      ArrayList<SysJob> arrayList0 = new ArrayList<SysJob>();
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(sysJob0);
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(sysJobMapper0).selectJobAll();
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      
      //Call method: init
      // Undeclared exception!
      try { 
        sysJobServiceImpl0.init();
      } catch(Throwable e) {
         verifyException("org.quartz.CronExpression", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("cronExpression cannot be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_init_08()  throws Throwable  {
      //caseID:170e9a13c8d8b9632e0da905102e21d3
      //CoveredLines: [25, 39, 40, 41, 45]
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      LinkedList<SysJob> linkedList0 = new LinkedList<SysJob>();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(sysJobMapper0).selectJobAll();
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      
      //Call method: init
      sysJobServiceImpl0.init();
  }

  @Test(timeout = 4000)
  public void test_insertJob_09()  throws Throwable  {
      //caseID:c4cdbdb5142593c96d3d037062f08c8c
      //CoveredLines: [25, 203, 204, 205, 207]
      //Input_0_SysJob: {}
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2328).when(sysJobMapper0).insertJob(any(com.ruoyi.job.domain.SysJob.class));
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: insertJob
      // Undeclared exception!
      try { 
        sysJobServiceImpl0.insertJob(sysJob0);
      } catch(Throwable e) {
         verifyException("org.quartz.CronExpression", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("cronExpression cannot be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_insertJob_10()  throws Throwable  {
      //caseID:70c8aa9506b7dae1b9542127d583a545
      //CoveredLines: [25, 203, 204, 205, 209]
      //Input_0_SysJob: {}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: insertJob
      int int0 = sysJobServiceImpl0.insertJob(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_resumeJob_11()  throws Throwable  {
      //caseID:156fcc1a06c99f3c656adf6217e6b716
      //CoveredLines: [25, 100, 101, 102, 103, 104, 106, 108]
      //Input_0_SysJob: {getJobId=2401, getJobGroup=\"NORMAL\"}
      //Assert: assertEquals(2401, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2401).when(sysJobMapper0).updateJob(any(com.ruoyi.job.domain.SysJob.class));
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long long0 = new Long(2401);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("NORMAL").when(sysJob0).getJobGroup();
      doReturn(long0).when(sysJob0).getJobId();
      
      //Call method: resumeJob
      int int0 = sysJobServiceImpl0.resumeJob(sysJob0);
      
      //Test Result Assert
      assertEquals(2401, int0);
  }

  @Test(timeout = 4000)
  public void test_run_12()  throws Throwable  {
      //caseID:5f9deead13983295e506bcb9f534163e
      //CoveredLines: [25, 68, 178, 179, 180, 181, 183, 184, 185, 186, 191]
      //Input_0_SysJob: {}
      //Assert: assertFalse(method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: run
      boolean boolean0 = sysJobServiceImpl0.run(sysJob0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_run_13()  throws Throwable  {
      //caseID:201fbc9776b4a6ca541e4db5b37966d4
      //CoveredLines: [25, 68, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 191]
      //Input_0_SysJob: {getJobId=405L 405L, getJobGroup=\"JobDetail cannot be null\"}
      //Assert: assertTrue(method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("JobDetail cannot be null").when(sysJob0).toString();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysJob0).when(sysJobMapper0).selectJobById(nullable(java.lang.Long.class));
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(scheduler0).checkExists(any(org.quartz.JobKey.class));
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long long0 = new Long(405L);
      //mock sysJob1
      SysJob sysJob1 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("JobDetail cannot be null").when(sysJob1).getJobGroup();
      doReturn(long0, long0).when(sysJob1).getJobId();
      
      //Call method: run
      boolean boolean0 = sysJobServiceImpl0.run(sysJob1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_selectJobList_14()  throws Throwable  {
      //caseID:4dc678ed9cf46e8f3826bddff565d98f
      //CoveredLines: [25, 56]
      //Input_0_SysJob: {}
      //Assert: assertNull(method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: selectJobList
      List<SysJob> list0 = sysJobServiceImpl0.selectJobList(sysJob0);
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_updateJob_15()  throws Throwable  {
      //caseID:ffffbe84ad8322c17363cb11fb893ee4
      //CoveredLines: [25, 68, 221, 222, 223, 227]
      //Input_0_SysJob: {}
      //Assert: assertEquals(0, method_result);
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateJob
      int int0 = sysJobServiceImpl0.updateJob(sysJob0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_updateJob_16()  throws Throwable  {
      //caseID:8691ffa973b7f618ee54f110ac1ebfc9
      //CoveredLines: [25, 68, 221, 222, 223, 225, 238, 240, 241, 246]
      //Input_0_SysJob: {getJobId=245}
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysJob0).when(sysJobMapper0).selectJobById(nullable(java.lang.Long.class));
      doReturn(245).when(sysJobMapper0).updateJob(any(com.ruoyi.job.domain.SysJob.class));
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long long0 = new Long(245);
      //mock sysJob1
      SysJob sysJob1 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(sysJob1).getJobId();
      
      //Call method: updateJob
      // Undeclared exception!
      try { 
        sysJobServiceImpl0.updateJob(sysJob1);
      } catch(Throwable e) {
         verifyException("org.quartz.CronExpression", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockIllegalArgumentException", e.getClass().getName());
         assertEquals("cronExpression cannot be null", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updateJob_17()  throws Throwable  {
      //caseID:633b2cd6fa88227d452b02a2eb3dd02c
      //CoveredLines: [25, 68, 221, 222, 223, 225, 238, 240, 241, 244, 246]
      //Input_0_SysJob: {getCronExpression=\"1\", getJobId=1 1 1, getJobGroup=\"1\", getConcurrent=\"getParserForType\"}
      
      SysJobServiceImpl sysJobServiceImpl0 = new SysJobServiceImpl();
      //mock sysJob0
      SysJob sysJob0 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.beans.factory.support.MethodOverride").when(sysJob0).getJobGroup();
      doReturn("org.springframework.beans.factory.support.MethodOverride").when(sysJob0).toString();
      //mock sysJobMapper0
      SysJobMapper sysJobMapper0 = mock(SysJobMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sysJob0).when(sysJobMapper0).selectJobById(nullable(java.lang.Long.class));
      doReturn(1).when(sysJobMapper0).updateJob(any(com.ruoyi.job.domain.SysJob.class));
      //mock scheduler0
      Scheduler scheduler0 = mock(Scheduler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(scheduler0).checkExists(any(org.quartz.JobKey.class));
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "scheduler", (Object) scheduler0);
      
      PrivateAccess.setVariable((Class<?>) SysJobServiceImpl.class, sysJobServiceImpl0, "jobMapper", (Object) sysJobMapper0);
      Long long0 = new Long(1);
      //mock sysJob1
      SysJob sysJob1 = mock(SysJob.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("getParserForType").when(sysJob1).getConcurrent();
      doReturn("1").when(sysJob1).getCronExpression();
      doReturn("1").when(sysJob1).getJobGroup();
      doReturn(long0, long0, long0).when(sysJob1).getJobId();
      
      //Call method: updateJob
      // Undeclared exception!
      try { 
        sysJobServiceImpl0.updateJob(sysJob1);
      } catch(Throwable e) {
         verifyException("org.quartz.CronScheduleBuilder", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockRuntimeException", e.getClass().getName());
         assertEquals("CronExpression '1' is invalid.", e.getMessage());
      }
  }
}
